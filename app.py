# app.py

import os
import streamlit as st
from langchain.llms import OpenAI as LangchainOpenAI

# Configuration d'OpenAI avec votre clÃ© d'API
os.environ['OPENAI_API_KEY'] = st.secrets["auth"]

# Configuration de la page
st.set_page_config(page_title='GÃ©nÃ©rateur de Messages', page_icon="ğŸ¤–", layout="wide", initial_sidebar_state="expanded")

# Titre avec emoji
st.title('GÃ©nÃ©rateur de Messages ğŸ¤–')

# Introduction
st.write("""
Ce gÃ©nÃ©rateur est conÃ§u pour aider Ã  rÃ©diger des messages adaptÃ©s Ã  diverses situations. 
Il suffit de fournir les dÃ©tails nÃ©cessaires, et le gÃ©nÃ©rateur produira un message adaptÃ© Ã  vos besoins.
""")

# SÃ©lection de la version de GPT
gpt_version = st.selectbox('SÃ©lectionnez une version de GPT:', ['gpt-3.5-turbo', 'gpt-4'])

# Saisie du rÃ´le
role = st.text_input('Indiquez votre rÃ´le:')

# Contexte
contexte = st.text_area('DÃ©crivez le contexte ou la situation:')

# RÃ©sultat souhaitÃ©
resultat_souhaite = st.text_area('Quel est le rÃ©sultat ou l'action souhaitÃ©e?')

# GÃ©nÃ©rer le message
def generate_message(gpt_version, role, contexte, resultat_souhaite):
    llm = LangchainOpenAI(model_name=gpt_version, temperature=0.2)
    prompt = f"RÃ´le: {role}. Contexte: {contexte}. RÃ©sultat souhaitÃ©: {resultat_souhaite}. GÃ©nÃ©rer un message adaptÃ©."
    response = llm.predict(prompt)
    return response

if st.button('GÃ©nÃ©rer le message ğŸš€'):
    message = generate_message(gpt_version, role, contexte, resultat_souhaite)
    st.subheader('Message GÃ©nÃ©rÃ© ğŸ“„')
    st.text_area("", message, height=300)

# Section d'aide et de support
st.sidebar.header('Aide & Support ğŸ†˜')
st.sidebar.text("Besoin d'aide ?")
st.sidebar.text("Consultez notre FAQ ou contactez-nous directement.")
